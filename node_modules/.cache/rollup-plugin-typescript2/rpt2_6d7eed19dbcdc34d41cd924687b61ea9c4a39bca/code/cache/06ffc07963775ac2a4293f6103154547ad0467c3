{"code":"import { NModuleNode } from \"./node/nmodulenode\";\r\nimport { NEndNode } from \"./node/nendnode\";\r\nimport { NSequenceNode } from \"./node/nsequencenode\";\r\nimport { NStartNode } from \"./node/nstartnode\";\r\nimport { ENodeType } from \"./types\";\r\nimport { NExclusiveNode } from \"./node/nexclusivenode\";\r\nimport { NInclusiveNode } from \"./node/ninclusivenode\";\r\nimport { NParallelNode } from \"./node/nparallelnode\";\r\nexport class NPageProcess {\r\n    constructor(id, cfg, container) {\r\n        /**\r\n         * 流程参数\r\n         */\r\n        this.params = {};\r\n        this.id = id;\r\n        this.name = cfg.name;\r\n        this.title = cfg.title;\r\n        this.container = container;\r\n        this.handleNodes(cfg.nodes);\r\n    }\r\n    /**\r\n     * 处理节点\r\n     * @param nodes\r\n     * @returns\r\n     */\r\n    handleNodes(nodes) {\r\n        const rNodes = [];\r\n        for (let n of nodes) {\r\n            let node;\r\n            switch (n.type) {\r\n                case ENodeType.START:\r\n                    node = new NStartNode(n, this);\r\n                    break;\r\n                case ENodeType.END:\r\n                    node = new NEndNode(n, this);\r\n                    break;\r\n                case ENodeType.MODULE:\r\n                    node = new NModuleNode(n, this);\r\n                    break;\r\n                case ENodeType.SEQUENCE:\r\n                    node = new NSequenceNode(n, this);\r\n                    break;\r\n                case ENodeType.EXCLUSIVE:\r\n                    node = new NExclusiveNode(n, this);\r\n                    break;\r\n                case ENodeType.INCLUSIVE:\r\n                    node = new NInclusiveNode(n, this);\r\n                    break;\r\n                case ENodeType.PARALLEL:\r\n                    node = new NParallelNode(n, this);\r\n                    break;\r\n            }\r\n            rNodes.push(node);\r\n        }\r\n        this.nodes = rNodes;\r\n        //执行节点初始化\r\n        this.doNodeInit();\r\n        console.log(this.nodes);\r\n    }\r\n    /**\r\n     * 对有init方法的节点执行init\r\n     */\r\n    doNodeInit() {\r\n        for (let node of this.nodes) {\r\n            if (node['init']) {\r\n                node['init'].apply(node);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取参数\r\n     * @param key   参数名，如果没有则表示整个参数对象\r\n     */\r\n    getParam(key) {\r\n        if (!this.params) {\r\n            return;\r\n        }\r\n        if (key) {\r\n            return this.params[key];\r\n        }\r\n        return this.params;\r\n    }\r\n    /**\r\n     * 保存参数\r\n     * @param key       key\r\n     * @param value     值\r\n     */\r\n    setParam(key, value) {\r\n        if (key) {\r\n            this.params[key] = value;\r\n        }\r\n        else {\r\n            this.params = value;\r\n        }\r\n    }\r\n    /**\r\n     * 开始流传\r\n     */\r\n    start() {\r\n        const node = this.nodes.find(item => item instanceof NStartNode);\r\n        if (!node) {\r\n            throw \"流程无开始节点\";\r\n        }\r\n        node.run();\r\n    }\r\n    /**\r\n     * 结束\r\n     */\r\n    end() {\r\n        delete this.currentNode;\r\n        this.finished = true;\r\n    }\r\n    /**\r\n     * 获取节点\r\n     * @param name  节点名称\r\n     * @returns     节点\r\n     */\r\n    getNode(name) {\r\n        return this.nodes.find(item => item.name === name);\r\n    }\r\n    /**\r\n     * 设置当前节点\r\n     * @param node\r\n     */\r\n    setCurrentNode(node) {\r\n        //解挂载当前节点\r\n        if (this.currentNode && this.currentNode instanceof NModuleNode) {\r\n            this.currentNode.module.unmount();\r\n        }\r\n        this.currentNode = node;\r\n    }\r\n    /**\r\n     * 执行下一个节点\r\n     * @returns\r\n     */\r\n    next() {\r\n        if (!this.currentNode) {\r\n            return;\r\n        }\r\n        //执行下个流程节点\r\n        let seq = this.getSequenceNode(this.currentNode.name);\r\n        if (seq) {\r\n            seq.run();\r\n        }\r\n    }\r\n    /**\r\n     * 获取顺序流节点\r\n     * @param name      src 或 dst节点名\r\n     * @param isDst     如果name为dst，则该项为true\r\n     */\r\n    getSequenceNode(name, isDst) {\r\n        if (isDst) {\r\n            return this.nodes.find(item => item['dst'] === name);\r\n        }\r\n        return this.nodes.find(item => item['src'] === name);\r\n    }\r\n    /**\r\n     * 获取顺序流节点集合，主要用于网关\r\n     * @param name      src 或 dst节点名\r\n     * @param isDst     如果name为dst，则该项为true\r\n     */\r\n    getSequenceNodes(name, isDst) {\r\n        if (isDst) {\r\n            return this.nodes.filter(item => item['dst'] === name);\r\n        }\r\n        return this.nodes.filter(item => item['src'] === name);\r\n    }\r\n}\r\n//# sourceMappingURL=npageprocess.js.map","references":["/Users/leiyang/develop/codework/jswork/npageflow/core/node/nmodulenode.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/node/nendnode.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/node/nnode.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/node/nsequencenode.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/node/nstartnode.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/types.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/node/nexclusivenode.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/node/ninclusivenode.ts","/Users/leiyang/develop/codework/jswork/npageflow/core/node/nparallelnode.ts"],"map":"{\"version\":3,\"file\":\"npageprocess.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/npageprocess.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAS,MAAM,SAAS,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,MAAM,OAAO,YAAY;IAuCrB,YAAY,EAAE,EAAC,GAAG,EAAC,SAAS;QAf5B;;WAEG;QACK,WAAM,GAAO,EAAE,CAAC;QAapB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,KAAa;QACrB,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,KAAI,IAAI,CAAC,IAAI,KAAK,EAAC;YACf,IAAI,IAAI,CAAC;YACT,QAAO,CAAC,CAAC,IAAI,EAAC;gBACV,KAAK,SAAS,CAAC,KAAK;oBAChB,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;oBAC9B,MAAM;gBACV,KAAK,SAAS,CAAC,GAAG;oBACd,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;oBAC5B,MAAM;gBACV,KAAK,SAAS,CAAC,MAAM;oBACjB,IAAI,GAAG,IAAI,WAAW,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;oBAC/B,MAAM;gBACV,KAAK,SAAS,CAAC,QAAQ;oBACnB,IAAI,GAAG,IAAI,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;oBACjC,MAAM;gBACV,KAAK,SAAS,CAAC,SAAS;oBACpB,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;oBAClC,MAAM;gBACV,KAAK,SAAS,CAAC,SAAS;oBACpB,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;oBAClC,MAAM;gBACV,KAAK,SAAS,CAAC,QAAQ;oBACnB,IAAI,GAAG,IAAI,aAAa,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;oBACjC,MAAM;aACb;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrB;QACD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,SAAS;QACT,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,UAAU;QACN,KAAI,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAC;YACvB,IAAG,IAAI,CAAC,MAAM,CAAC,EAAC;gBACZ,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aAC5B;SACJ;IACL,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,GAAW;QAChB,IAAG,CAAC,IAAI,CAAC,MAAM,EAAC;YACZ,OAAO;SACV;QACD,IAAG,GAAG,EAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,GAAU,EAAC,KAAS;QACzB,IAAG,GAAG,EAAC;YACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SAC5B;aAAI;YACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;IACL,CAAC;IAED;;OAEG;IACH,KAAK;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAA,EAAE,CAAA,IAAI,YAAY,UAAU,CAAC,CAAC;QAC/D,IAAG,CAAC,IAAI,EAAC;YACL,MAAM,SAAS,CAAC;SACnB;QACD,IAAI,CAAC,GAAG,EAAE,CAAC;IACf,CAAC;IAED;;OAEG;IACH,GAAG;QACC,OAAO,IAAI,CAAC,WAAW,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,IAAW;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAA,EAAE,CAAA,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,IAAU;QACrB,SAAS;QACT,IAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,YAAY,WAAW,EAAC;YAC3D,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;SACrC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,IAAI;QACA,IAAG,CAAC,IAAI,CAAC,WAAW,EAAC;YACjB,OAAO;SACV;QACD,UAAU;QACV,IAAI,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACtD,IAAG,GAAG,EAAC;YACH,GAAG,CAAC,GAAG,EAAE,CAAC;SACb;IACL,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,IAAW,EAAC,KAAc;QACtC,IAAG,KAAK,EAAC;YACL,OAAsB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAA,EAAE,CAAA,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;SACrE;QACD,OAAsB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAA,EAAE,CAAA,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;IACtE,CAAC;IAED;;;;OAIG;IACF,gBAAgB,CAAC,IAAW,EAAC,KAAc;QACxC,IAAG,KAAK,EAAC;YACL,OAAwB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAA,EAAE,CAAA,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;SACzE;QACD,OAAwB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAA,EAAE,CAAA,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;IAC1E,CAAC;CACJ\"}","dts":{"name":"/Users/leiyang/develop/codework/jswork/npageflow/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/npageprocess.d.ts","writeByteOrderMark":false,"text":"import { NNode } from \"./node/nnode\";\r\nimport { NSequenceNode } from \"./node/nsequencenode\";\r\nimport { INode } from \"./types\";\r\nexport declare class NPageProcess {\r\n    /**\r\n     * 流程id\r\n     */\r\n    private id;\r\n    /**\r\n     * 流程名\r\n     */\r\n    private name;\r\n    /**\r\n     * 流程标题\r\n     */\r\n    private title;\r\n    /**\r\n     * 流程节点集合\r\n     */\r\n    private nodes;\r\n    /**\r\n     * 当前节点\r\n     */\r\n    private currentNode;\r\n    /**\r\n     * 流程参数\r\n     */\r\n    private params;\r\n    /**\r\n     * 结束标志\r\n     */\r\n    private finished;\r\n    /**\r\n     * 容器\r\n     */\r\n    container: HTMLElement;\r\n    constructor(id: any, cfg: any, container: any);\r\n    /**\r\n     * 处理节点\r\n     * @param nodes\r\n     * @returns\r\n     */\r\n    handleNodes(nodes: INode[]): void;\r\n    /**\r\n     * 对有init方法的节点执行init\r\n     */\r\n    doNodeInit(): void;\r\n    /**\r\n     * 获取参数\r\n     * @param key   参数名，如果没有则表示整个参数对象\r\n     */\r\n    getParam(key?: string): any;\r\n    /**\r\n     * 保存参数\r\n     * @param key       key\r\n     * @param value     值\r\n     */\r\n    setParam(key: string, value: any): void;\r\n    /**\r\n     * 开始流传\r\n     */\r\n    start(): void;\r\n    /**\r\n     * 结束\r\n     */\r\n    end(): void;\r\n    /**\r\n     * 获取节点\r\n     * @param name  节点名称\r\n     * @returns     节点\r\n     */\r\n    getNode(name: string): NNode;\r\n    /**\r\n     * 设置当前节点\r\n     * @param node\r\n     */\r\n    setCurrentNode(node: NNode): void;\r\n    /**\r\n     * 执行下一个节点\r\n     * @returns\r\n     */\r\n    next(): void;\r\n    /**\r\n     * 获取顺序流节点\r\n     * @param name      src 或 dst节点名\r\n     * @param isDst     如果name为dst，则该项为true\r\n     */\r\n    getSequenceNode(name: string, isDst?: boolean): NSequenceNode;\r\n    /**\r\n     * 获取顺序流节点集合，主要用于网关\r\n     * @param name      src 或 dst节点名\r\n     * @param isDst     如果name为dst，则该项为true\r\n     */\r\n    getSequenceNodes(name: string, isDst?: boolean): NSequenceNode[];\r\n}\r\n"}}
